<style>
    body {
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
        color: #ddd;
        background-image: linear-gradient(to right top, #495057, #444);
        color-scheme: light dark;
    }

    .main {
        display: flex;
        align-items: center;
        flex-direction: column;
        gap: 1.6rem;
        border-radius: 6px;
        width: 40rem;
        height: 50rem;
        background-color: #333;
        padding: 2.4rem;
        box-shadow: 0 2px 10px 5px rgba(0, 0, 0, 0.1);
        border: 2px solid #242424;
        position: relative;
    }

    .addToDoForm {
        width: 100%;
        display: flex;
        align-items: center;
        gap: 0.4rem;
    }

    input {
        width: 100%;
    }

    .date {
        width: 10%;
        display: flex;
        justify-content: flex-end;
    }

    select {
        border: 2px solid #242424;
        border-radius: 6px;
        background-color: inherit;
        display: flex;
        height: 100%;
        width: 6%;
    }

    select:focus {
        outline: none;
        background-color: #444;
    }

    option {
        background-color: #333
    }

    ul {
        max-height: 36rem;
        overflow: auto;
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 0.8rem;
        list-style: none;
    }

    li {
        display: flex;
        align-items: center;
        justify-content: space-between;
        border-radius: 6px;
        padding: 1.2rem;
        height: 4rem;
        background-color: #444;
    }

    .trashButton {
        background-color: #333;
        border: 2px solid #333;
        display: none;
        align-items: center;
        justify-content: center;
        padding: 0.4rem;
    }

    .trashButton:hover {
        background-color: #242424;
    }

    .trash {
        fill: #ddd;
    }

    .checkbox {
        width: 1.2rem;
    }

    .todo {
        font-size: 1.4rem;
        width: 75%;
        display: flex;
        align-items: center;
        gap: 0.6rem;
        word-break: break-all;
    }

    .todoDescription {
        border-left: 1px solid #ddd;
        padding-left: 1.2rem;
        height: 100%;
        width: 20%;
        font-size: 1.2rem;
        display: flex;
        flex-direction: column;
        align-content: flex-start;
        justify-content: center;
    }

    .completed {
        text-decoration: line-through;
    }

    .darkgray {
        color: darkgrey;
    }

    .checkboxForm {
        display: flex;
        align-items: center;
    }

    .checkbox, .checkboxIcon {
        background-color: unset;
        border: unset;
        padding: 0;
    }

    .checkbox:hover {
        background-color: unset;
        fill: #ddd;
    }

    .checkboxIcon {
        overflow: hidden;
        border-radius: 50%;
        transition: all 0.1s;
    }

    .checkboxIcon:hover {
        background-color: #ddd;
    }

    .checkboxIconPerformed {
        background-color: #ddd;
    }

    .checkboxIconPerformed:hover {
        background-color: unset;
    }

    .sortForm {
        overflow: hidden;
        padding-left: 0.4rem;
        top: 0;
        left: 0;
        font-size: 1.2rem;
        position: absolute;
        display: flex;
        align-items: center;
        gap: 0.4rem;
        border: 2px solid #242424;
        border-top: none;
        border-left: none;
    }

    .sortForm label {
        gap: 0.4rem;
        display: flex;
        height: 100%;
    }

    .sortForm select {
        border: none;
        width: 1.2rem;
    }

    .sortForm button {
        border-radius: 0;
        border: none;
        padding: 0.4rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .addCategoryButton {
        padding: 0.4rem 0.8rem;
        position: absolute;
        top: -10%;
        right: 0;
        display: flex;
        align-items: center;
        background-color: #333;
        border-radius: 6px;
        transition: all 0.2s;
    }

    .addCategoryButton:hover {
        background-color: #242424;
    }

    .AddCategoryForm {
        display: none;
        gap: 0.4rem;
        position: absolute;
        top: -10%;
    }

    .plus {
        width: 2.4rem;
    }

    .backButton {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #333;
        border-radius: 6px;
        width: 4rem;
        transition: all 0.2s;
    }

    .backButton:hover {
        background-color: #242424;
    }

    .changeStorage {
        height: 2rem;
        width: 20%;
        position: absolute;
        top: 0;
        left: 0;
    }

    .changeStorage select {
        width: 100%;
        border-top: none;
        border-left: none;
        border-radius: unset;
    }

</style>

@model HomePageViewModel


<div class="main">
    <form method="post" class="changeStorage">
        <select>
            <option>DbStorage</option>
            <option>XmlStorage</option>
        </select>
    </form>
    <div class="addCategoryButton">
        <span>Add category</span>
        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="plus" viewBox="0 0 16 16">
            <path
                d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"/>
        </svg>
    </div>
    <form method="post" asp-action="AddCategoryXml" class="AddCategoryForm">
        <span class="backButton">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left"
                 viewBox="0 0 16 16">
                <path fill-rule="evenodd"
                      d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8"/>
            </svg>
        </span>
        <input type="hidden" asp-for="AddCategoryRequest.Id" value="@Guid.NewGuid()"/>
        <input type="text" asp-for="AddCategoryRequest.Name" required/>
        <button>Add</button>
    </form>
    <h2>ToDo list</h2>
    <form class="addToDoForm" method="post" asp-action="AddToDoXml">
        <input type="hidden" asp-for="AddToDoRequest.Id" value="@Guid.NewGuid()"/>
        <input type="text" asp-for="AddToDoRequest.Task" required/>
        <select asp-for="AddToDoRequest.CategoryName" required>
            @foreach (var category in Model.CategoriesXml)
            {
            <option value="@category.Name">@category.Name</option>
            }
        </select>
        <input type="date" class="date" asp-for="AddToDoRequest.DateToPerform"/>
        <button>Add</button>
    </form>
    <ul>
        @foreach (var todo in Model.ToDosXml.OrderBy(x => x.IsPerformed))
        {
        <li class="todoContainer @(todo.IsPerformed ? "darkgray" : "")">
            <div class="todo">

                <form class="checkboxForm" method="post">
                    <input type="hidden" asp-for="PerformTodoRequest.Id" value="@todo.Id"/>
                    @if (!todo.IsPerformed)
                    {
                    <button class="checkbox" asp-action="PerformToDoXml">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="checkboxIcon"
                             viewBox="0 0 16 16">
                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"/>
                        </svg>
                    </button>
                    }
                    else
                    {
                    <button class="checkbox" asp-action="UnperformToDoXml">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor"
                             class="checkboxIcon checkboxIconPerformed" viewBox="0 0 16 16">
                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"/>
                        </svg>
                    </button>
                    }
                </form>
                <span class="@(todo.IsPerformed ? "completed" : "")">@todo.Task</span>
            </div>
            <form method="post" asp-action="DeleteToDoXml">
                <input type="hidden" asp-for="DeleteToDoRequest.Id" value="@todo.Id"/>
                <button class="trashButton">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="trash"
                         viewBox="0 0 16 16">
                        <path
                            d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                        <path
                            d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                    </svg>
                </button>
            </form>
            <div class="todoDescription">
                <span>@todo.CategoryName</span>
                @if (todo.DateToPerform != null)
                {
                <span>@todo.DateToPerform?.ToShortDateString()</span>
                }
            </div>
        </li>
        }
    </ul>
</div>

@section Scripts
{
<script>
    const todoContainers = document.querySelectorAll(".todoContainer");
    const addCategoryButton = document.querySelector(".addCategoryButton");
    const addCategoryForm = document.querySelector(".AddCategoryForm");
    const backButton = document.querySelector(".backButton");

    addCategoryButton.addEventListener("click", function () {
        addCategoryButton.style.display = "none";
        addCategoryForm.style.display = "flex";
    })

    backButton.addEventListener("click", function () {
        addCategoryForm.style.display = "none";
        addCategoryButton.style.display = "flex";
    })

    todoContainers.forEach(todoContainer => {
        const trashButton = todoContainer.querySelector(".trashButton");
        const todoDescription = todoContainer.querySelector(".todoDescription");

        todoContainer.addEventListener("mouseover", function () {
            todoDescription.style.display = "none";
            trashButton.style.display = "flex";
        })

        todoContainer.addEventListener("mouseout", function () {
            todoDescription.style.display = "flex";
            trashButton.style.display = "none";
        })
    })
</script>
}